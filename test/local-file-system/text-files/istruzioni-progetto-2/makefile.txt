Il progetto dovrà includere un Makefile avente, tra gli altri, i target all per generare gli eseguibili del programma server e del programma client; clean/cleanall per ripulire la directory di lavoro dai file generati, moduli oggetto, socket file, logs, librerie, etc.; tre target di test: test1, test2 e test3.
Il target test1: deve far partire il processo server con una dimensione dello storage pari a 10000 file ed una capacità in bytes di 128MBytes ed un pool di threads worker pari ad 1. Il processo server deve essere eseguito con valgrind facendo precedere il comando di avvio del server dalla stringa “valgrind –leak-check=full”. Al termine dell’esecuzione dovrà risultare che il numero di malloc ed il numero di free devono coincidere e non ci devono essere errori. Il target del Makefile dopo aver avviato il server, esegue uno script Bash che lancia uno o più processi client configurati per testare singolarmente tutte le operazioni implementate dal server, con un ritardo tra diverse operazioni di 200 millisecondi. Il server deve essere terminato con il segnale SIGHUP al termine dell’esecuzione dello script. Lo script Bash lancia tutti client con l’opzione ‘-p’.
 4
Il target test2: deve eseguire il server (senza usare valgrind) con una dimensione dello storage pari a 10 file ed una capacità in bytes di 1MBytes ed un pool di worker threads pari a 4. Anche in questo caso viene lanciato uno script Bash che esegue più processi client che inviano richieste al server ed al termine viene inviato un segnale di tipo SIGHUP. Lo scopo del test è quello di dimostrare (tramite l’output prodotto dal server al termine dell’esecuzione e l’output prodotto dai client con l’opzione ‘-p’) la funzionalità dell’algoritmo di rimpiazzamento dei file nella cache del server.
Il target test3: deve eseguire il server (senza usare valgrind) con un pool di thread pari a 8 con una dimensione dello storage di 100 file ed una capacità in bytes di 32MBytes. Viene lanciato uno script Bash che esegue ininterrottamente un numero di processi client (senza usare l’opzione ‘-p’) in modo tale che ce ne siano sempre almeno 10 in esecuzione contemporaneamente. Ogni processo client invia più richieste (almeno 5 richieste) al server con ‘-t 0’. Il test dopo 30 secondi si interrompe ed invia il segnale SIGINT al server e termina (senza aspettare l’eventuale terminazione dei processi client ancora attivi). Lo scopo di questo test è quello di eseguire uno stress test del server. Il test si intende superato se non si producono errori a run-time lato server e se il sunto delle statistiche prodotto dal server riporta “valori ragionevoli” (cioè, non ci sono valori negativi, valori troppo alti, campi vuoti, etc...).