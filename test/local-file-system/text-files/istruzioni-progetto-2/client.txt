Il programma client è un programma separato dal server con una propria funzione main. E’ costruito per inviare richieste per creare/rimuovere/aprire/scrivere/... file nel/dal file storage server esclusivamente attraverso l’API descritta nella sezione successiva. Il programma client invia richieste al server sulla base degli argomenti specificati sulla riga di comando. In generale, il protocollo tra client e server è di tipo “richiesta-risposta”. Particolarmente degno di nota è il caso di richiesta di scrittura di un file che provoca un “capacity miss” e l’espulsione dallo storage di un file che era stato precedentemente modificato (ad esempio dall’operazione ‘appendToFile’ -- vedere la sezione successiva). In questo caso, il server risponde alla richiesta di operazione di scrittura inviando il file espulso dalla cache. Sulla base degli argomenti a linea di comando specificati per il client, tale file verrà buttato via oppure salvato in una opportuna directory (vedere l’opzione ‘-D’).
Il client accetta un certo numero di argomenti da linea di comando. Tra questi, almeno i seguenti: -h : stampa la lista di tutte le opzioni accettate dal client e termina immediatamente;
-f filename : specifica il nome del socket AF_UNIX a cui connettersi;
-w dirname[,n=0] : invia al server i file nella cartella ‘dirname’, ovvero effettua una richiesta di scrittura al server per i file. Se la directory ‘dirname’ contiene altre directory, queste vengono visitate ricorsivamente fino a quando non si leggono ‘n‘ file; se n=0 (o non è specificato) non c’è un limite superiore al numero di file da inviare al server (tuttavia non è detto che il server possa scriverli tutti).
-W file1[,file2]: lista di nomi di file da scrivere nel server separati da ‘,’;
-D dirname : cartella in memoria secondaria dove vengono scritti (lato client) i file che il server rimuove a seguito di capacity misses (e che erano stati modificati da operazioni di scrittura) per servire le scritture richieste attraverso l’opzione ‘-w’ e ‘-W’. L’opzione ‘-D’ deve essere usata quindi congiuntamente all’opzione ‘-w’ o ‘-W’, altrimenti viene generato un errore. Se l’opzione ‘-D’ non viene specificata, tutti i file che il server invia verso il client a seguito di espulsioni dalla cache, vengono buttati via. Ad esempio, supponiamo i seguenti argomenti a linea di comando “-w send -D store”, e supponiamo che dentro la cartella ‘send’ ci sia solo il file ‘pippo’. Infine supponiamo che il server, per poter scrivere nello storage il file ‘pippo’ deve espellere il file ‘pluto’ e ‘minni’. Allora, al termine dell’operazione di scrittura, la cartella
2
‘store’ conterrà sia il file ‘pluto’ che il file ‘minni’. Se l’opzione ‘-D’ non viene specificata, allora il server invia sempre i file ‘pluto’ e ‘minni’ al client, ma questi vengono buttati via;
-r file1[,file2] : lista di nomi di file da leggere dal server separati da ‘,’ (esempio: -r pippo,pluto,minni);
-R [n=0] : tale opzione permette di leggere ‘n’ file qualsiasi attualmente memorizzati nel server; se n=0 (o
non è specificato) allora vengono letti tutti i file presenti nel server;
-d dirname : cartella in memoria secondaria dove scrivere i file letti dal server con l’opzione ‘-r’ o ‘-R’. L’opzione -d va usata congiuntamente a ‘-r’ o ‘-R’, altrimenti viene generato un errore; Se si utilizzano le opzioni ‘-r’ o ‘-R’ senza specificare l’opzione ‘-d’ i file letti non vengono memorizzati sul disco;
-t time : tempo in millisecondi che intercorre tra l’invio di due richieste successive al server (se non specificata si suppone -t 0, cioè non c’è alcun ritardo tra l’invio di due richieste consecutive);
-l file1[,file2] : lista di nomi di file su cui acquisire la mutua esclusione; -u file1[,file2] : lista di nomi di file su cui rilasciare la mutua esclusione; -c file1[,file2] : lista di file da rimuovere dal server se presenti;
-p : abilita le stampe sullo standard output per ogni operazione. Le stampe associate alle varie operazioni riportano almeno le seguenti informazioni: tipo di operazione, file di riferimento, esito e dove è rilevante i bytes letti o scritti.
Gli argomenti a linea di comando del client possono essere ripetuti più volte (ad eccezione di ‘-f’, ‘-h’, ‘-p’). Ogni argomento va interpretato come una o più richieste che il client invia al server. La scelta di come gestire le richieste da parte dei client è lasciata allo studente, tenendo conto, però, che argomenti da linea di comando distinti corrispondono a richieste distinte al server. Ad esempio, la richiesta “-r file1 -d /dev/null -w ./mydir”, si traduce in una richiesta di lettura di file1 ed una o più richieste di scrittura per i file contenuti nella directory ./mydir.
Il processo client, qualora debba inviare più richieste al processo server, aspetta che una richiesta sia stata completata dal server (protocollo di comunicazione “richiesta-risposta”). Questo vuol dire che il server risponde sempre ad una richiesta con un messaggio che può contenere o i dati richiesti dal client (ad esempio, per richieste di lettura), oppure una notifica di esito dell’operazione (ad esempio, successo dell’operazione, oppure fallimento con eventuale messaggio o codice di errore associato).