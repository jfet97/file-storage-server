Il file storage server deve essere implementato come un singolo processo multi-threaded secondo lo schema “master-worker” in cui il numero di threads worker è fissato all’avvio del server sulla base delle informazioni di configurazione, ed ogni worker può gestire richieste di client diversi. Eventuali altri thread di “supporto” (oltre al thread main) possono essere presenti nel sistema a discrezione dello studente.
All’avvio del server, il thread main legge il file di configurazione chiamato “config.txt” che può risiedere in una qualsiasi directory del sistema (NOTA: tale file non è un header file quindi non va incluso ma va parsato opportunamente!). Il formato di tale file non viene specificato e deve essere deciso e descritto nella relazione dallo studente. Il file conterrà tutti i parametri che definiscono la configurazione del server, come ad esempio il numero di thread workers, la dimensione dello spazio di memorizzazione, il nome del socket file, ed altri parametri che lo studente ritiene utili.
Il processo server accetta connessioni di tipo AF_UNIX da parte dei client. Il nome del file associato al socket è pubblico e comunque conosciuto ai client (ad esempio “-f /tmp/LSOfiletorage.sk”). Tale processo rimane sempre attivo in attesa di nuove connessioni da parte di nuovi client oppure in attesa di richieste di operazioni da eseguire inviate attraverso le connessioni attive.
Il server termina alla ricezione dei segnali SIGINT, SIGQUIT e SIGHUP. Nel caso di ricezione di uno dei due segnali SIGINT o SIGQUIT, il server termina il prima possibile, ossia non accetta più nuove richieste da parte dei client connessi chiudendo tutte le connessioni attive (dovrà comunque generare il sunto delle statistiche, descritto nel seguito). Nel caso di ricezione del segnale SIGHUP, non vengono più accettate nuove richieste da parte di nuovi client, ma vengono servite tutte le richieste dei client connessi al momento della ricezione del segnale, quindi il server terminerà solo quando tutti i client connessi chiuderanno la connessione.

Lo spazio di memorizzazione del server ha una capacità limitata, sia nel numero massimo di file memorizzabili che come spazio effettivo di memorizzazione, ad esempio, il server potrebbe memorizzare al più 100 file e fino al raggiungimento di 100 Mbytes di spazio (tali informazioni sono passate al server attraverso il file di config).
Si chiede allo studente di gestire tale spazio di memorizzazione come una cache di file. Se il server non ha capacità sufficiente ad accettare nuovi file, dovrà espellere file per guadagnare capacità. I file espulsi devono essere inviati al client la cui richiesta ne ha causato l’espulsione (il quale li gestisce come descritto più avanti), e non sono più accessibili in richieste successive.
Sono possibili diverse politiche di rimpiazzamento dei file nella cache del server a seguito di “capacity misses”, lo studente dovrà implementare almeno la politica di rimpiazzamento FIFO, mentre politiche più sofisticate (come ad esempio LRU, LFU, etc..) possono essere implementate opzionalmente.
Durante l’esecuzione, il processo server storage effettua il logging, su un file di log specificato nel file di configurazione, di tutte le operazioni che vengono richieste dai client o di gestione interna del server (ad esempio, l’arrivo di una nuova connessione, il nome del file letto e l’ammontare dei byte restituiti al client, la quantità di dati scritti, se è stata richiesta una operazione di lock su un file, se è partito l’algoritmo di rimpiazzamento dei file della cache e quale vittima è stata selezionata, etc.). La scelta del formato del file di log è lasciata allo studente.
Al termine dell’esecuzione, il server stampa sullo standard output in modo formattato un sunto delle operazioni effettuate durante l’esecuzione, e tra queste almeno le seguenti informazioni:
1. numero di file massimo memorizzato nel server;
2. dimensione massima in Mbytes raggiunta dal file storage;
3. numero di volte in cui l’algoritmo di rimpiazzamento della cache è stato eseguito per selezionare uno o più
file “vittima”;
4. lista dei file contenuti nello storage al momento della chiusura del server.
